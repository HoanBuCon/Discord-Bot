import { ChatInputCommandInteraction, Message, GuildMember, EmbedBuilder, ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder, ModalSubmitInteraction, ButtonBuilder, ButtonStyle, ButtonInteraction, ComponentType, MessageComponentInteraction } from 'discord.js';
import { User, type CollectorFilter } from 'discord.js';
import { Command } from '../Command';
import { PermissionUtils } from '../../utils/PermissionUtils';

export class TinhtuoiCommand extends Command {
    constructor() {
        super('tinhtuoi', 'M√°y t√≠nh tu·ªïi th√¥ng minh');
    }

    async execute(interactionOrMessage: ChatInputCommandInteraction | Message, args?: string[]): Promise<void> {
        const permissions = new PermissionUtils(interactionOrMessage, args);
        const guild = interactionOrMessage.guild;
        let user = permissions.getMentionedUser(interactionOrMessage, args);
        let member: GuildMember | null;
    
        // Xac dinh doi tuong thuc thi lenh
        if (interactionOrMessage instanceof Message)
            member = interactionOrMessage.member;
        else
            member = interactionOrMessage.member as GuildMember;
    
        if (!guild || !member) {
            if (interactionOrMessage instanceof ChatInputCommandInteraction)
                await interactionOrMessage.reply({ content: '‚ö†Ô∏è L·ªánh n√†y ch·ªâ ho·∫°t ƒë·ªông trong server.', flags: 64 });
            else
                await interactionOrMessage.reply('‚ö†Ô∏è L·ªánh n√†y ch·ªâ ho·∫°t ƒë·ªông trong server.');
            return;
        }

        // Neu khong mention User nao thi lay chinh nguoi su dung lenh
        if (!user) {
            if (interactionOrMessage instanceof Message)
                user = interactionOrMessage.author;
            else
                user = interactionOrMessage.user;
        }

        // Neu User duoc mention la chinh con bot
        if (user.id === interactionOrMessage.client.user?.id) {
            if (interactionOrMessage instanceof ChatInputCommandInteraction)
                await interactionOrMessage.reply({ content: `Never ask women and SayGex69 their age üó£Ô∏èüî•`, flags: 64 });
            else
                await interactionOrMessage.reply(`Never ask women and SayGex69 their age üó£Ô∏èüî•`);
            return;
        }

        // Neu User duoc mention la bot khac
        if (user.bot) {
            if (interactionOrMessage instanceof ChatInputCommandInteraction)
                await interactionOrMessage.reply({ content: 'Never ask women and Discord Bots their age üó£Ô∏èüî•', flags: 64 });
            else
                await interactionOrMessage.reply('Never ask women and Discord Bots their age üó£Ô∏èüî•');
            return;
        }

        // Goi phuong thuc tinh tuoi
        await this.handleAgeCalculator(interactionOrMessage, user);
    }

    // Xu ly cho ca Slash Command va Prefix Command
    private async handleAgeCalculator(interactionOrMessage: ChatInputCommandInteraction | Message, user: User): Promise<void> {
        let targetUser;
        if (user)
            targetUser = user;
        else {
            if (interactionOrMessage instanceof Message)
                targetUser = interactionOrMessage.author;
            else
                targetUser = interactionOrMessage.user;
        }

        const button = new ButtonBuilder()
            .setCustomId('tinhtuoi_button')
            .setLabel('Nh·∫≠p tu·ªïi')
            .setStyle(ButtonStyle.Primary);

        const row = new ActionRowBuilder<ButtonBuilder>().addComponents(button);

        let reply: Message<boolean> | null = null;
        const embed = new EmbedBuilder()
            .setColor(0x0099FF)
            .setTitle('üìù M√°y T√≠nh Tu·ªïi Th√¥ng Minh')
            .setDescription('**Nh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ t√≠nh tu·ªïi b·∫±ng si√™u m√°y t√≠nh th√¥ng minh!**')
            .setFooter({ text: '(Si√™u thu·∫≠t to√°n Deep Learning, k·∫øt h·ª£p Machine Learning v√† Reinforcement Learning)' });

        try {
            if (interactionOrMessage instanceof ChatInputCommandInteraction) {
                await interactionOrMessage.reply({
                    content: `Oi oi oi <@${user.id}>!!`,
                    embeds: [embed],
                    components: [row],
                });

                if (interactionOrMessage.channel) {
                    reply = await interactionOrMessage.fetchReply() as Message<boolean>;
                }
            } else if (interactionOrMessage instanceof Message) {
                reply = await interactionOrMessage.reply({
                    content: `Oi oi oi <@${user.id}>!!`,
                    embeds: [embed],
                    components: [row],
                });
            }
        } catch (error) {
            console.error('‚ö†Ô∏è L·ªói khi g·ª≠i tin nh·∫Øn:', error);
            return;
        }

        if (!reply) {
            console.error('‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o collector v√¨ reply null.');
            return;
        }

        // Tao Collector de xu ly button clicks
        const filter = (i: MessageComponentInteraction) => i.user.id === targetUser.id
        const collector = reply.createMessageComponentCollector({
            filter,
            time: 60000,
            componentType: ComponentType.Button,
        });

        collector.on('collect', async (interaction: ButtonInteraction) => {
            await this.showModal(interaction, user);
        });

        collector.on('end', async () => {
            try {
                const updatedRow = new ActionRowBuilder<ButtonBuilder>()
                    .addComponents(button.setDisabled(true));
        
                await reply.edit({
                    content: '‚ö†Ô∏è H·∫øt th·ªùi gian! D√πng l·ªánh `/tinhtuoi` ho·∫∑c `69!tinhtuoi` ƒë·ªÉ th·ª≠ l·∫°i!',
                    components: [updatedRow]
                });
            } catch (error) {
                console.error('‚ö†Ô∏è L·ªói khi ch·ªânh s·ª≠a tin nh·∫Øn:', error);
                throw (error);
            }
        });
    }

    // Phuong thuc hien thi Modal (dung chung cho Slash va Prefix)
    private async showModal(interaction: ChatInputCommandInteraction | ButtonInteraction, user: User): Promise<void> {
        const modal = new ModalBuilder()
            .setCustomId('tinhtuoi_modal')
            .setTitle('M√°y T√≠nh Tu·ªïi Th√¥ng Minh');
    
        const ageInput = new TextInputBuilder()
            .setCustomId('age')
            .setLabel('Nh·∫≠p tu·ªïi c·ªßa b·∫°n')
            .setStyle(TextInputStyle.Short)
            .setPlaceholder('V√≠ d·ª•: 18')
            .setRequired(true)
            .setMaxLength(3);
    
        const actionRow = new ActionRowBuilder<TextInputBuilder>().addComponents(ageInput);
        modal.addComponents(actionRow);
        
        try {
            await interaction.showModal(modal);

            // Tao Collector de xu ly modal
            const filter = (i: ModalSubmitInteraction) => i.customId === 'tinhtuoi_modal' && i.user.id === interaction.user.id;
            const modalInteraction = await interaction.awaitModalSubmit({ filter, time: 60000 }).catch(() => null);
    
            if (!modalInteraction) {
                console.log('‚ö†Ô∏è Ng∆∞·ªùi d√πng kh√¥ng ph·∫£n h·ªìi modal ho·∫∑c modal ƒë√£ h·∫øt h·∫°n.');
                return;
            }
    
            const ageStr = modalInteraction.fields.getTextInputValue('age');
            const age = parseInt(ageStr, 10);
    
            if (isNaN(age)) {
                await modalInteraction.reply({ content: 'üö´ Tu·ªïi kh√¥ng h·ª£p l·ªá!', flags: 64 }).catch(() => {});
                return;
            }

            if (age < 0) {
                await modalInteraction.reply({ content: 'üö´ Bruhhh, qu√° tr√¨nh sinh h·ªçc c·ªßa anh b·∫°n ph√°t tri·ªÉn ng∆∞·ª£c h·∫£ üíÄ', flags: 64 }).catch(() => {});
                return;
            }

            if (age > 122) {
                await modalInteraction.reply({ content: 'üö´ Ng∆∞·ªùi s·ªëng th·ªç nh·∫•t th·∫ø gi·ªõi m·ªõi ch·ªâ 122 tu·ªïi th√¥i anh b·∫°n ‚ò†Ô∏è', flags: 64 }).catch(() => {});
                return;
            }
    
            await modalInteraction.deferReply();
            await modalInteraction.editReply({ content: '```üîÑ M√°y t√≠nh tu·ªïi th√¥ng minh ƒëang x·ª≠ l√Ω...```'});

            const updateProgress = async (progress: number, delay: number) => {
                setTimeout(async () => {
                    await modalInteraction.editReply({ content: `\`\`\`üîÑ M√°y t√≠nh tu·ªïi th√¥ng minh ƒëang x·ª≠ l√Ω (${progress}%)...\`\`\`` }).catch(() => {});
                }, delay);
            };

            // Timeout xu ly
            updateProgress(5, 500);
            updateProgress(12, 1000);
            updateProgress(25, 1500);
            updateProgress(43, 2000);
            updateProgress(57, 2500);
            updateProgress(72, 3000);
            updateProgress(86, 3500);
            updateProgress(95, 4000);
            updateProgress(100, 4500);

            setTimeout(async () => {
                const resultEmbed = this.calculateAge(age, user);
                await modalInteraction.editReply({ embeds: [resultEmbed] }).catch(() => {});
            }, 5000);
        } catch (error) {
            console.error('‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω modal:', error);
            throw (error);
        }
    }

    // Tinh tuoi (thuat toan sieu phuc tap oach xa lach vkl)
    private calculateAge(age: number, user: User): EmbedBuilder {
        if (age == 0) {
            return new EmbedBuilder()
                .setColor(0x00FF00)
                .setTitle('‚úÖ K·∫øt Qu·∫£')
                .setDescription(`# B·∫°n hi·ªán t·∫°i **${age} tu·ªïi**, <@${user.id}>! üéâ\n*(Anh b·∫°n c√≤n ch∆∞a cai s·ªØa m·∫π üçºüíÄüíÄ‚ò†Ô∏è)*`)
                .setTimestamp();
        }
        else if (age == 122) {
            return new EmbedBuilder()
                .setColor(0x00FF00)
                .setTitle('‚úÖ K·∫øt Qu·∫£')
                .setDescription(`# B·∫°n hi·ªán t·∫°i **${age} tu·ªïi**, <@${user.id}>! üéâ\n*(Bro nghƒ© m√¨nh s·ªëng th·ªç nh·∫•t th·∫ø gi·ªõi üíÄ‚ò†Ô∏èüó£Ô∏èüî•)*`)
                .setTimestamp();
        }
        else {
            return new EmbedBuilder()
                .setColor(0x00FF00)
                .setTitle('‚úÖ K·∫øt Qu·∫£')
                .setDescription(`# B·∫°n hi·ªán t·∫°i **${age} tu·ªïi**, <@${user.id}>! üéâ`)
                .setTimestamp();
        }
    }
}